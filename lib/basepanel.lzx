<library>
    <include href="extensions/drawview.lzx"/>
    <include href="applybasecolor.lzx"/>
    <include href="drawpanel.lzx"/>
    <include href="borderradius.lzx"/>
    
    <class name="basepanel" extends="drawpanel" with="applybasecolor, borderradius">
        <attribute name="scopes" value="null"/>
        <attribute name="drawchildren" value="true" type="boolean"/>

        <attribute name="padding" style="padding" value="3" type="number"/>
        <attribute name="borderwidth" style="border-width" type="number" value="0"/>
        <attribute name="bordercolor" style="border-color" type="color" value="null"/>
        <attribute name="highlightcolor" style="highlight-color" type="color" value="#0000ff"/>
        <attribute name="iconcolor" style="icon-color" type="color" value="#0000ff"/>
        <attribute name="selectioncolor" style="selection-color" type="color" value="#c2d9e7"/>
        <attribute name="interiorbordercolor" style="interior-border-color" type="color" value="null"/>
        <attribute name="interiorfillcolor" style="interior-fill-color" type="color" value="null"/>
        <attribute name="interiorborderwidth" style="interior-border-width" type="number" value="${this.borderwidth}"/>
        <attribute name="textcolor" style="text-color" value="black" type="string" />
        <attribute name="textshadowcolor" style="text-shadow-color" value="white" type="string" />
        <attribute name="textfont" style="text-font" value="Arial" type="string" />
        <attribute name="textfontsize" style="text-fontsize" value="11" type="number" />

        <handler name="onwidth" method="_forceredraw"/>
        <handler name="onheight" method="_forceredraw"/>
        <method name="_forceredraw" args="ignore=null" >            
            <![CDATA[
            if (this.context && canvas.isinited) {
                this.clear();
                this.redraw();
            }
            ]]>
        </method>

        <method name="redraw" args="ignore=null" >            
            <![CDATA[
            if (! canvas.isinited || this.lockredraw) return;
            // stop measuring the size for now, store current value to restore later
            var measuresize = this.measuresize;
            this.measuresize = false;

            if (this['draw']) {
                this.draw(this);
            }

            if (this.scopes && this.scopes.length && this.drawchildren) {
                this.__drawchildren(this);
            }

            this.drawlast(this);
            this.measuresize = measuresize;
            ]]>
        </method>

        <method name="__drawchildren" args="context" >            
            <![CDATA[
            var scopes = this.scopes;
            if (! scopes || ! scopes.length || ! this.drawchildren) {
                return;
            }

            for (var i = 0, l = scopes.length; i < l; i++) {
                var scope = scopes[i];
                if (scope) {
                    var x = scope.x;
                    var y = scope.y;
                    context.translate(x, y);
                    context.beginPath();
                    scope.draw(context);
                    context.translate(-x, -y);
                }
            }
            ]]>
        </method>

        <method name="drawshape" args="context,x,y,width,height">
            context.rect(x, y, width, height, this.bordertopleftradius, this.bordertoprightradius, this.borderbottomrightradius, this.borderbottomleftradius);
        </method>

        <!--method name="range" args="val, max, min=null">
            <![CDATA[
            val = (val > max) ? max : val;
            if (min != null) {
                val = (val < min) ? min : val;
            }
            return val;
            ]]>
        </method>

        <method name="_rect" args="context,x,y,width,height,topleftradius=0,bottomleftradius=0,bottomrightradius=0,toprightradius=0">
            // the radius can't be bigger than our width/height
            var maxsize = Math.min(width, height) * .5;
            topleftradius = this.range(topleftradius, maxsize, 0);
            // default to topleftradius
            bottomleftradius = this.range(bottomleftradius || topleftradius, maxsize, 0);
            bottomrightradius = this.range(bottomrightradius || topleftradius, maxsize, 0);
            toprightradius = this.range(toprightradius || topleftradius, maxsize, 0);

            // Method to draw curves
            var curvemethod = context['curveTo'] ? 'curveTo' : 'quadraticCurveTo';

            context.moveTo(x,y+topleftradius);
            context.lineTo(x,y+height-bottomleftradius);
            if (bottomleftradius != 0) {
                context[curvemethod](x,y+height,x+bottomleftradius,y+height);
            }
            context.lineTo(x+width-bottomrightradius,y+height);
            if (bottomrightradius != 0) {
                context[curvemethod](x+width,y+height,x+width,y+height-bottomrightradius);
            }
            context.lineTo(x+width,y+toprightradius);
            if (toprightradius != 0) {
                context[curvemethod](x+width,y,x+width-toprightradius,y);
            }
            context.lineTo(x+topleftradius,y);
            if (topleftradius != 0) {
                context[curvemethod](x,y,x,y+topleftradius);
            }
        </method-->

        <method name="addScope" args="scope">
            <![CDATA[
            if (! this.scopes) {
                this.scopes = [scope];
                // can't use this - fails for sun1.lzx text resize
                //this.__redrawdelegate = new LzDelegate(this, 'redraw');
            } else {
                this.scopes.push(scope);
            }
            new LzDelegate(this, 'redraw', scope, 'onx');
            new LzDelegate(this, 'redraw', scope, 'ony');
            new LzDelegate(this, 'redraw', scope, 'onwidth');
            new LzDelegate(this, 'redraw', scope, 'onheight');
            
            //this.__redrawdelegate.register( scope, 'onx');
            //this.__redrawdelegate.register( scope, 'ony');
            //this.__redrawdelegate.register( scope, 'onwidth');
            //this.__redrawdelegate.register( scope, 'onheight');
            //console.log('addScope', scope, this.scopes);
            ]]>
        </method>
        <method name="removeScope" args="scope">
            <![CDATA[
            for (var i = 0; i < this.scopes.length; i++) {
                if (this.scopes[i] === scope) {
                    scope.onx.unregisterAll();
                    scope.ony.unregisterAll();
                    scope.onwidth.unregisterAll();
                    scope.onheight.unregisterAll();
                    //this.__redrawdelegate.unregisterFrom(scope.onx);
                    //this.__redrawdelegate.unregisterFrom(scope.ony);
                    //this.__redrawdelegate.unregisterFrom(scope.onwidth);
                    //this.__redrawdelegate.unregisterFrom(scope.onheight);
                    this.scopes.splice(i, 1);
                    return;
                }
            }
            ]]>
        </method>
        <method name="destroy">
            <![CDATA[
            if (this.scopes) {
                for (var i = 0; i < this.scopes.length; i++) {
                    var scope = this.scopes[i];
                    if (scope) {
                        scope.onx.unregisterAll();
                        scope.ony.unregisterAll();
                        scope.onwidth.unregisterAll();
                        scope.onheight.unregisterAll();
                        //this.__redrawdelegate.unregisterFrom(scope.onx);
                        //this.__redrawdelegate.unregisterFrom(scope.ony);
                        //this.__redrawdelegate.unregisterFrom(scope.onwidth);
                        //this.__redrawdelegate.unregisterFrom(scope.onheight);
                    }
                }
                this.scopes = null;
            }
            super.destroy();
            ]]>
        </method>
        <method name="drawlast" args="context">
            return;
        </method>
    </class>
</library>

<mixin name="borderradius">
    <attribute name="borderradius" style="border-radius" type="string" value=""/>
    <attribute name="_axismap" value="{horizontal: 0, vertical: 1}" />
    <attribute name="_cornermap" value="{topleft: 0, topright: 1, bottomright: 2, bottomleft: 3}" />
    <attribute name="_borderradii" value="null" />
    <attribute name="_slash" value="new RegExp('\\s*\\/\\s*')" />
    <attribute name="_space" value="new RegExp('\\s+')" />

    <method name="construct" args="parent,args">
      super.construct(parent, args);
      this._borderradii = [0,0,0,0,0,0,0,0];
    </method>

    <event name="onborderradius"/>
    <!-- Parses CSS border radius specifications into 8 radii that can be used as arguments to roundRect -->
    <setter name="borderradius" args="radius"><![CDATA[
        if (this.borderradius === radius) return;
        this.borderradius = radius;
        var axismap = this._axismap;
        var cornermap = this._cornermap;
        // handle list of border radii per http://www.w3.org/TR/css3-background/#the-border-radius
        // The four values for each radii are given in the order top-left, top-right, bottom-right, bottom-left.
        var axes = String(radius).split(this._slash);
        // Compute defaults.  If no '/', then horizontal == vertical
        if (axes.length == 1) { axes[1] = axes[0]; }
        for (var axis in axismap) {
          var axisindex = axismap[axis];
          var radii = String(axes[axisindex]).split(this._space);
          var l = radii.length;
          // If top-right is omitted it is the same as top-left.
          if (l <= cornermap.topright) radii[cornermap.topright] = radii[cornermap.topleft];
          // If bottom-left is omitted it is the same as top-right.
          if (l <= cornermap.bottomleft) radii[cornermap.bottomleft] = radii[cornermap.topright];
          // If bottom-right is omitted it is the same as top-left.
          if (l <= cornermap.bottomright) radii[cornermap.bottomright] = radii[cornermap.topleft];
          axes[axisindex] = radii;
        }
        // Now update the individual properties
        for (var corner in cornermap) {
          var index = cornermap[corner];
          this._setborderradius(corner, axes[axismap.horizontal][index] + "/" + axes[axismap.vertical][index]);
        }
        if (this.onborderradius.ready) this.onborderradius.sendEvent(radius);
        //Debug.info('borderradius', radius, radii);
        ]]>
    </setter>

    <!-- Parses an individual corner radius specification and inserts it into the radius array -->
    <method name="_setborderradius" args="corner,radius"><![CDATA[
      if (! radius) { return; }
      var attrname = 'border' + corner + 'radius';
      if (this[attrname] === radius) { return; }
      this[attrname] = radius;
      var borderradii = this._borderradii;
      var axismap = this._axismap;
      var cornermap = this._cornermap;
      var axes = String(radius).split(this._slash);
      if (axes.length == 1) { axes[1] = axes[0]; }
      var changed = false;
      for (var axis in axismap) {
        var axisindex = axismap[axis];
        var radiiindex = axisindex * 4 + cornermap[corner];
        var oldval = borderradii[radiiindex];
        var newval = parseFloat(axes[axisindex]);
        if (oldval !== newval) {
          changed = true;
          borderradii[radiiindex] = newval;
        }
      }
      if (changed) {
        var event = 'on' + attrname;
        if (this[event].ready) { this[event].sendEvent(radius); }
      }
    ]]></method>

    <attribute name="bordertopleftradius" style="border-top-left-radius" type="string" value=""/>
    <event name="onbordertopleftradius"/>
    <setter name="bordertopleftradius" args="radius">
      this._setborderradius('topleft', radius);
    </setter>

    <attribute name="bordertoprightradius" style="border-top-right-radius" type="string" value=""/>
    <event name="onbordertoprightradius"/>
    <setter name="bordertoprightradius" args="radius">
      this._setborderradius('topright', radius);
    </setter>
    <attribute name="borderbottomleftradius" style="border-bottom-left-radius" type="string" value=""/>
    <event name="onborderbottomleftradius"/>
    <setter name="borderbottomleftradius" args="radius">
      this._setborderradius('bottomleft', radius);
    </setter>
    <attribute name="borderbottomrightradius" style="border-bottom-right-radius" type="string" value=""/>
    <event name="onborderbottomrightradius"/>
    <setter name="borderbottomrightradius" args="radius">
      this._setborderradius('bottomright', radius);
    </setter>
</mixin>
